{"version":3,"sources":["utilities.js","components/heroBanner/style.js","components/button/style.js","components/title/style.js","components/title/Title.js","components/button/Button.js","components/heroBanner/HeroBanner.js","App.js","serviceWorker.js","index.js"],"names":["colors","backgrounds","Wrapper","styled","div","img","h1","StyledButton","button","props","reverse","Heading1","Title","children","Button","onClick","HeroBanner","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAEaA,EACF,UADEA,EAGG,UAHHA,EAIG,UAJHA,EAOE,UAGFC,EACG,UADHA,EAEG,UAFHA,EAIA,U,8xBCbN,IAAMC,EAAUC,IAAOC,IAAV,KAYQD,YAAOD,EAAPC,CAAH,IACHF,GAGKE,YAAOD,EAAPC,CAAH,IACFF,GAGME,IAAOE,IAAV,KAQPF,IAAOG,GAAV,K,qlCC5BR,IAAMC,EAAeJ,IAAOK,OAAV,KACd,SAAAC,GAAK,OAAIA,EAAMC,QAAUV,EAAeA,KAKjC,SAAAS,GAAK,OAAIA,EAAMC,QAAUV,EAAeA,KAE1C,SAAAS,GAAK,OAAIA,EAAMC,QAAUV,EAAoB,iBAGhD,SAAAS,GAAK,OAAIA,EAAMC,QAAUV,EAAoBA,KAClC,SAAAS,GAAK,OAAIA,EAAMC,QAAUV,EAAcA,KAE3C,SAAAS,GAAK,OAAIA,EAAMC,QAAUV,EAAoBA,KAI9BG,YAAOI,EAAPJ,CAAH,IACnBH,EACWA,EAEPA,EACWA,GAKMG,YAAOI,EAAPJ,CAAH,IAClBH,EACWA,EAEPA,EACWA,GAKAG,IAAOK,OAAV,IAWDP,G,kICjDxB,IAMeU,EANER,IAAOG,GAAV,KAGH,SAAAG,GAAK,OAAIA,EAAMC,QAAUV,EAAeA,KCGpCY,MANf,YAAqC,IAArBF,EAAoB,EAApBA,QAASG,EAAW,EAAXA,SACrB,OACI,kBAAC,EAAD,CAAUH,QAASA,GAAUG,ICgBtBC,MAlBf,YAA+C,IAA9BC,EAA6B,EAA7BA,QAASL,EAAoB,EAApBA,QAASG,EAAW,EAAXA,SAC/B,OACI,kBAACN,EAAD,CAAcG,QAASA,EAASK,QAASA,GAAUF,ICCpD,SAASG,EAAT,GAAiD,IAA5BD,EAA2B,EAA3BA,QAASF,EAAkB,EAAlBA,SAAUI,EAAQ,EAARA,MAC3C,OACI,kBAACf,EAAD,KACI,kBAAC,EAAD,KAAQe,GACR,kBAAC,EAAD,CAAQF,QAASA,GAAUF,ICCxBK,MANf,WACE,OACE,kBAACF,EAAD,OCKgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de730df1.chunk.js","sourcesContent":["// Colors\r\n\r\nexport const colors = {\r\n    white: \"#FFFFFF\",\r\n    black: \"#111111\",\r\n    primary500: \"#118AF5\",\r\n    success500: \"#64d136\",\r\n    info500: \"#31c7f9\",\r\n    warning500: \"#F7ce2a\",\r\n    danger500: \"#FF5121\"\r\n};\r\n\r\nexport const backgrounds = {\r\n    primary100: \"#CFF2FE\",\r\n    primary800: \"#05388E\",\r\n    info100: \"#D5FEFD\",\r\n    info800: \"#0F5490\",\r\n    success100: \"#ECFCD7\",\r\n    warning100: \"#FEF9D4\",\r\n    danger100: \"#FFE9D2\",\r\n    secondary100: \"#F3F3F3\",\r\n};\r\n","import styled from 'styled-components';\r\nimport { backgrounds } from '../../utilities';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  align-content: center;\r\n  padding: 0.25em 1em;\r\n  border-radius: 5px;\r\n  width: 960px;\r\n  height: 240px;\r\n`;\r\n\r\nexport const WrapperLight = styled(Wrapper)`\r\n  background-color: ${backgrounds.primary100};\r\n`\r\n\r\nexport const WrapperDark = styled(Wrapper)`\r\n  background-color: ${backgrounds.info800};\r\n`\r\n\r\nexport const WrapperImage = styled.img`\r\n  max-height: 240px;\r\n  width: 960px;\r\n  object-fit: cover;\r\n  position: relative;\r\n  background-image: url('cat.png');\r\n  z-index: 0;\r\n`\r\nexport const H1 = styled.h1`\r\n  position: absolute;\r\n  top: 20%;\r\n  left: 10%;\r\n`\r\n","import styled from 'styled-components';\r\nimport {colors, backgrounds } from '../../utilities';\r\n\r\nexport const StyledButton = styled.button`\r\n  color: ${props => props.reverse ? colors.white : colors.primary500};\r\n  font-size: 1em;\r\n  margin: 1em;\r\n  padding: 0.25em 1em;\r\n  border: 2px solid;\r\n  border-color: ${props => props.reverse ? colors.white : colors.primary500};\r\n  border-radius: 2rem;\r\n  background: ${props => props.reverse ? colors.primary500 : 'transparent'};\r\n  \r\n  :hover {\r\n    color: ${props => props.reverse ? colors.primary500 : colors.white};\r\n    background-color: ${props => props.reverse ? colors.white: colors.primary500};;\r\n    cursor: pointer;\r\n    border-color: ${props => props.reverse ? colors.primary500 : colors.white};\r\n   }\r\n`;\r\n\r\nexport const StyledButtonSuccess = styled(StyledButton)`\r\n    color: ${colors.success500};\r\n    border: 2px solid ${colors.success500};\r\n    :hover {\r\n        color: ${colors.white};\r\n        background-color: ${colors.success500};\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nexport const StyledButtonDanger = styled(StyledButton)`\r\n    color: ${colors.danger500};\r\n    border: 2px solid ${colors.danger500};\r\n    :hover {\r\n        color: ${colors.white};\r\n        background-color: ${colors.danger500};\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nexport const ButtonBullet = styled.button`\r\n  height: 12px;\r\n  background-color: black;\r\n  border: none;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  bottom: -20%;\r\n  margin: auto;\r\n  display: block;\r\n\r\n  &:hover {\r\n    background-color: ${backgrounds.primary800};\r\n  }\r\n\r\n  &:last-of-type {\r\n   margin-left: 15px;\r\n  }\r\n`","import styled from 'styled-components';\r\nimport {colors} from '../../utilities';\r\n\r\nconst Heading1 = styled.h1`\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: ${props => props.reverse ? colors.white : colors.primary500};\r\n`;\r\n\r\nexport default Heading1;","import React from 'react';\r\nimport Heading1 from './style';\r\n\r\nfunction Title({reverse, children}) {\r\n    return (\r\n        <Heading1 reverse={reverse}>{children}</Heading1>\r\n    );\r\n  }\r\n\r\nexport default Title;","import React from 'react';\r\nimport { StyledButton, StyledButtonSuccess, StyledButtonDanger } from './style';\r\n\r\nfunction Button({onClick, reverse, children}) {\r\n    return (\r\n        <StyledButton reverse={reverse} onClick={onClick}>{children}</StyledButton>\r\n    );\r\n}\r\n\r\nexport function ButtonSuccess({onClick, children}) {\r\n    return (\r\n        <StyledButtonSuccess onClick={onClick}>{children}</StyledButtonSuccess>\r\n    );\r\n}\r\n\r\nexport function ButtonDanger({onClick, children}) {\r\n    return (\r\n        <StyledButtonDanger onClick={onClick}>{children}</StyledButtonDanger>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {useState} from 'react';\r\nimport { Wrapper, WrapperLight, WrapperImage, WrapperDark, H1 } from './style';\r\nimport { ButtonBullet } from '../button/style';\r\nimport Title from '../title/Title';\r\nimport Button from '../button/Button';\r\n\r\nexport function HeroBanner({onClick, children, title}) {\r\n    return (\r\n        <Wrapper>\r\n            <Title>{title}</Title>\r\n            <Button onClick={onClick}>{children}</Button>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport function HeroBannerLight({onClick, children, title}) {\r\n    return (\r\n        <WrapperLight>\r\n            <Title>{title}</Title>\r\n            <Button onClick={onClick}>{children}</Button>\r\n        </WrapperLight>\r\n    );\r\n}\r\n\r\nexport function HeroBannerDark({onClick, children, title}) {\r\n    return (\r\n        <WrapperDark>\r\n            <Title reverse>{title}</Title>\r\n            <Button reverse onClick={onClick}>{children}</Button>\r\n        </WrapperDark>\r\n    );\r\n}\r\n\r\nexport function HeroBannerImage({state, title}) {\r\n\r\n    state = {\r\n        src: [\r\n            'cat.jpg',\r\n            'cat1.jpg',\r\n            'cat2.jpg',\r\n            'cat3.jpg'\r\n        ],\r\n    }\r\n\r\n    const [index, handleIndex] = useState(0);\r\n    \r\n    return (\r\n        <Wrapper>\r\n            <WrapperImage src={state.src[index]} alt=\"\"/>\r\n            <H1>{title}</H1>\r\n            <ButtonBullet onClick={() => handleIndex(index + 1)}></ButtonBullet>\r\n            <ButtonBullet onClick={() => handleIndex(index - 1)}></ButtonBullet>\r\n        </Wrapper>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\n\nimport { HeroBanner } from './components/heroBanner/HeroBanner';\n\nfunction App() {\n  return (\n    <HeroBanner />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}